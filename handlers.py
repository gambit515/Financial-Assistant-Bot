# handlers.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import add_expense, get_total_expenses, get_monthly_expenses
from utils import format_month_year, calculate_budget_distribution

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, ADD_EXPENSE, CALCULATE_BUDGET = range(3)

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
FINANCIAL_LITERACY_TEXT = """
–ü—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:
1) –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
2) –í–µ–¥–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç.
3) –ò–∑–º–µ–Ω–∏—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø–æ–∫—É–ø–∫–∞–º.
4) –î–µ—Ä–∂–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏.
5) –ü–æ–ª—É—á–∞–π—Ç–µ –ª—å–≥–æ—Ç—ã –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.
"""

SAVING_MONEY_TEXT = """
–ö–∞–∫ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ—Ö–æ–¥?
- –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –Ω–∞ —Å—á—ë—Ç–µ ¬´–∫—Ä—É–≥–ª—ã–µ¬ª —Å—É–º–º—ã.
- –°–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–µ–ª–æ—á—å –≤ –∫–æ–ø–∏–ª–∫—É.
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ø–∏–ª–∫—É-—Ç–∞–±–ª–∏—Ü—É.

–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏ –±—ã—Å—Ç—Ä–æ?
- –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–µ –º–µ–Ω—å—à–µ 10% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤.
- –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π.
- –û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.
"""


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("–£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∏", callback_data="add_expense")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É üí∞", callback_data="show_total")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º üìÖ", callback_data="monthly_stats")],
        [InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü üßÆ", callback_data="calculate_budget")],
        [InlineKeyboardButton("–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è", callback_data="info_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ –∏–∑ CallbackQuery (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏) –∏–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    if update.callback_query:
        query = update.callback_query
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    return CHOOSING


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞

    user_id = query.from_user.id
    data = query.data

    if data == "add_expense":
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        return ADD_EXPENSE
    elif data == "show_total":
        total = get_total_expenses(user_id)
        keyboard = [[InlineKeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–û–±—â–∞—è —Å—É–º–º–∞ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:.2f}", reply_markup=reply_markup)
        return CHOOSING
    elif data == "monthly_stats":
        monthly_expenses = get_monthly_expenses(user_id)
        if monthly_expenses:
            response = "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º:\n"
            for month_key, total in monthly_expenses:
                formatted_month = format_month_year(month_key)
                response += f"{formatted_month}: {total:.2f}\n"
        else:
            response = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö."
        keyboard = [[InlineKeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(response, reply_markup=reply_markup)
        return CHOOSING
    elif data == "calculate_budget":
        keyboard = [[InlineKeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="main_menu")]]
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü:")
        return CALCULATE_BUDGET
    elif data == "info_menu":
        # –ú–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å?", callback_data="financial_literacy")],
            [InlineKeyboardButton("–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å?", callback_data="saving_money")],
            [InlineKeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=reply_markup)
        return CHOOSING
    elif data == "financial_literacy":
        # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="info_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(FINANCIAL_LITERACY_TEXT, reply_markup=reply_markup)
        return CHOOSING
    elif data == "saving_money":
        # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="info_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(SAVING_MONEY_TEXT, reply_markup=reply_markup)
        return CHOOSING
    elif data == "main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await start(update, context)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        user_id = update.message.from_user.id
        add_expense(user_id, amount)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard = [[InlineKeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ {amount:.2f} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=reply_markup)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    return CHOOSING


# –†–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞
async def calculate_budget_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        budget = float(update.message.text)
        if budget <= 0:
            raise ValueError()

        response = calculate_budget_distribution(budget)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard = [[InlineKeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response, reply_markup=reply_markup)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    return CHOOSING


# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END